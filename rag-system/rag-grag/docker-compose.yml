version: '3.5'

services:
  etcd:
    container_name: milvus-etcd-roles
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd-cze:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio:
    container_name: milvus-minio-roles
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio-cze:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  standalone:
    container_name: milvus-standalone-roles
    image: milvusdb/milvus:v2.4.13-gpu
    command: ["milvus", "run", "standalone"]
    security_opt:
    - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus-cze:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: ["gpu"]
              device_ids: ["0"]
    depends_on:
      - "etcd"
      - "minio"

  neo4j:
    container_name: neo4j-roles
    image: neo4j:5.5  # You can use any stable version
    environment:
      NEO4J_AUTH: neo4j/testtest  # Default username/password for testing
    ports:
      - "7687:7687"  # Neo4j Bolt port for database communication
      - "7474:7474"  # Neo4j browser port for accessing web interface
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/neo4j-cze:/data
    depends_on:
      - "standalone"  # Optional: if you want Neo4j to wait for Milvus to be ready

  db:
    image: postgres:15
    container_name: postgres-roles
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: adminadmin
      POSTGRES_DB: chatdb
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - default
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin" ]
      interval: 30s
      timeout: 20s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:8.13.0
    container_name: pgadmin-roles
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: adminadmin
    ports:
      - "5050:80"
    depends_on:
      - db  # Ensure this points to your PostgreSQL container


networks:
  default:
    name: milvus-cze
